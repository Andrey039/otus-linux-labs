# -*- mode: ruby -*-
# vim: set ft=ruby :
home = ENV['HOME']
ENV["LC_ALL"] = "en_US.UTF-8"

MACHINES = {
  :otuslinux => {
        :box_name => "centos/7",
        :ip_addr => '192.168.11.101',
        :disks => {
                :sata1 => {
                        :dfile => './sata1.vdi',
                        :size => 250,
                        :port => 1
                },
                :sata2 => {
                        :dfile => './sata2.vdi',
                        :size => 250, # Megabytes
                        :port => 2
                },
                :sata3 => {
                        :dfile => './sata3.vdi',
                        :size => 250,
                        :port => 3
                },
                :sata4 => {
                        :dfile => './sata4.vdi',
                        :size => 250, # Megabytes
                        :port => 4
                }

        }

  },
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

      config.vm.define boxname do |box|

          box.vm.box = boxconfig[:box_name]
          box.vm.host_name = boxname.to_s

          #box.vm.network "forwarded_port", guest: 3260, host: 3260+offset

          box.vm.network "private_network", ip: boxconfig[:ip_addr]

          box.vm.provider :virtualbox do |vb|
                  vb.customize ["modifyvm", :id, "--memory", "1024"]
                  needsController = false
                  boxconfig[:disks].each do |dname, dconf|
                          unless File.exist?(dconf[:dfile])
                                vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                                needsController =  true
                          end

                  end
                  if needsController == true
                     vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                     boxconfig[:disks].each do |dname, dconf|
                         vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                     end
                  end
          end
          box.vm.provision "shell", inline: <<-SHELL
              mkdir -p ~root/.ssh
              cp ~vagrant/.ssh/auth* ~root/.ssh
              yum install -y mdadm smartmontools hdparm gdisk
######################################
### Задание 1
######################################             
cat > /etc/sysconfig/watchlog << EOF
# Configuration file for my watchdog service
# Place it to /etc/sysconfig
# File and word in that file that we will be monit
WORD="ALERT"
LOG=/var/log/watchlog.log
EOF
cat > /var/log/watchlog.log << EOF
testline testline testline testline
testline testline testline testlinetestline testline testline testlinetestline testline testline testline
testline testline testline testlinetestline testline testline testlinetestline testline testline testline
ALERT
testline testline testline testlinetestline testline testline testlinetestline testline testline testline
testline testline testline testlinetestline testline testline testlinetestline testline testline testline
testline testline testline testlinetestline testline testline testlineALERTtestline testline testline testline
EOF
cat > /opt/watchlog.sh << EOF
#!/bin/bash
WORD=\\$1
LOG=\\$2
DATE=\\`date\\`
if grep \\$WORD \\$LOG &> /dev/null
then
logger \"\\$DATE: The word is found\"
else
exit 0
fi
EOF
cat > /etc/systemd/system/watchlog.service << EOF
[Unit]
Description=My watchlog service
[Service]
Type=oneshot
EnvironmentFile=/etc/sysconfig/watchlog
ExecStart=/opt/watchlog.sh \\$WORD \\$LOG
EOF
cat > /etc/systemd/system/watchlog.timer << EOF
[Unit]
Description=Run watchlog script every 30 second
Requires=watchlog.service
[Timer]
# Run every 30 second
OnUnitActiveSec=30
AccuracySec=1us
Unit=watchlog.service
[Install]
WantedBy=multi-user.target
EOF
                              chmod +x /opt/watchlog.sh
                              systemctl start watchlog.timer
######################################
### Задание 2
######################################  
yum install epel-release -y && yum install spawn-fcgi php php-cli mod_fcgid httpd -y 
cat > /etc/systemd/system/spawn-fcgi.service << EOF
[Unit]
Description=Spawn-fcgi startup service by Otus
After=network.target
[Service]
Type=simple
PIDFile=/var/run/spawn-fcgi.pid
EnvironmentFile=/etc/sysconfig/spawn-fcgi
ExecStart=/usr/bin/spawn-fcgi -n \\$OPTIONS
KillMode=process
[Install]
WantedBy=multi-user.target
EOF
cat > /etc/sysconfig/spawn-fcgi << EOF
# You must set some working options before the "spawn-fcgi" service will work.
# If SOCKET points to a file, then this file is cleaned up by the init script.
#
# See spawn-fcgi(1) for all possible options.
#
# Example :
SOCKET=/var/run/php-fcgi.sock
OPTIONS=\"-u apache -g apache -s \\$SOCKET -S -M 0600 -C 32 -F 1 -- /usr/bin/php-cgi\"
EOF
systemctl start spawn-fcgi 
######################################
### Задание 3
######################################  
cp /usr/lib/systemd/system/httpd.service /etc/systemd/system/httpd@.service
sed -i 's#^EnvironmentFile.*#EnvironmentFile\=\/etc\/sysconfig\/httpd\-\%I#' /etc/systemd/system/httpd@.service
cp /etc/sysconfig/httpd /etc/sysconfig/httpd-first
mv /etc/sysconfig/httpd /etc/sysconfig/httpd-second 
cat >> /etc/sysconfig/httpd-first << EOF
OPTIONS=-f conf/first.conf
EOF
cat >> /etc/sysconfig/httpd-second << EOF
OPTIONS=-f conf/second.conf
EOF
cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/first.conf
mv /etc/httpd/conf/httpd.conf /etc/httpd/conf/second.conf
sed -i 's/^Listen 80.*/Listen 8080/' /etc/httpd/conf/second.conf
cat >> /etc/httpd/conf/second.conf << EOF
PidFile /var/run/httpd-second.pid
EOF
systemctl start httpd@first
systemctl start httpd@second

SHELL

      end
  end
end

